import React, { useEffect, useState } from "react";
import axios from "axios";
import {
  Car,
  User,
} from "lucide-react";

// Fallback fuel icon
const FuelIcon = () => (
  <svg className="h-4 w-4" fill="none" stroke="currentColor" strokeWidth="2" viewBox="0 0 24 24">
    <path d="M4 4h10v16H4z" strokeLinecap="round" strokeLinejoin="round" />
    <path d="M14 4l6 6v6a2 2 0 01-2 2h-2" strokeLinecap="round" strokeLinejoin="round" />
  </svg>
);

const AutoLocPremiumDashboard = () => {
  const [cars, setCars] = useState([]);
  const [rentals, setRentals] = useState([]);

  // üîπ Fetch Cars
  const fetchCars = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/cars");
      setCars(res.data);
    } catch (err) {
      console.error("Erreur fetch cars:", err);
    }
  };

  // üîπ Fetch Rentals
  const fetchRentals = async () => {
    try {
      const res = await axios.get("http://localhost:5000/api/rentals");
      setRentals(res.data);
    } catch (err) {
      console.error("Erreur fetch rentals:", err);
    }
  };

  // üîπ Run on component mount
  useEffect(() => {
    fetchCars();
    fetchRentals();
  }, []);

  // üîπ Helper: Status badge color
  const getStatusColor = (status) => {
    switch (status) {
      case "approved":
      case "available":
        return "bg-green-100 text-green-800";
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "rejected":
      case "booked":
        return "bg-red-100 text-red-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  };

  // üîπ Helper: Find upcoming rental for a car
  const getUpcomingRental = (carId) => {
    const now = new Date();
    return rentals.find(
      (r) =>
        r.carId?._id === carId &&
        new Date(r.startDate) > now
    );
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* üè¢ Header */}
      {/* <div className="bg-white border-b border-gray-200 px-6 py-4">
        <h1 className="text-xl font-bold text-gray-900">AutoLoc Premium Dashboard</h1>
      </div> */}

      <div className="flex">
        <div className="flex-1 p-6 grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* üìÖ R√©servations */}
          <div className="bg-white rounded-lg shadow-sm border">
            <div className="p-6 border-b">
              <h2 className="text-lg font-semibold">R√©servations</h2>
            </div>
            <div className="p-6 space-y-4">
              {rentals.map((r) => (
                <div key={r._id} className="border rounded-lg p-4">
                  <div className="flex items-center justify-between">
                    <div>
                      <User className="h-4 w-4 inline text-gray-500" />
                      <span className="ml-2 font-medium">{r.userId?.nom}</span>
                      <span className={`ml-2 px-2 py-1 rounded-full text-xs ${getStatusColor(r.status)}`}>
                        {r.status}
                      </span>
                      <div className="text-sm text-gray-500">{r.userId?.email}</div>
                    </div>
                    <div className="text-blue-600 font-bold">{r.price} MAD</div>
                  </div>
                  <div className="text-xs text-gray-500 mt-2">
                    {new Date(r.startDate).toLocaleDateString()} ‚Üí {new Date(r.endDate).toLocaleDateString()}
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* üöó V√©hicules */}
          <div className="bg-white rounded-lg shadow-sm border">
            <div className="p-6 border-b">
              <h2 className="text-lg font-semibold">V√©hicules</h2>
            </div>
            <div className="p-6 space-y-4">
              {cars.map((v) => {
                const upcomingRental = getUpcomingRental(v._id);

                return (
                  <div key={v._id} className="flex items-start justify-between border rounded-lg p-4 bg-white shadow-sm">
                    {/* Vehicle Image */}
                    <img
                      src={v.image || "https://via.placeholder.com/100x70?text=Car"}
                      alt={`${v.marque} ${v.modele}`}
                      className="w-24 h-20 object-cover rounded-md"
                    />

                    {/* Middle Content */}
                    <div className="flex-1 px-4 space-y-2">
                      {/* Title & Status */}
                      <div className="flex justify-between items-start">
                        <div>
                          <div className="font-semibold text-gray-800">
                            {v.marque} {v.modele} ({v.year})
                          </div>
                          {/* <div className="text-sm text-gray-500">{v.immatriculation || "‚Äî"}</div> */}
                        </div>
                        <span className={`text-sm px-3 py-1 rounded-full ${getStatusColor(v.status)}`}>
                          {v.status}
                        </span>
                      </div>

                      {/* Specs */}
                      {/* <div className="flex space-x-4 text-sm text-gray-600">
                        <div className="flex items-center space-x-1">
                          <Car className="h-4 w-4" />
                          <span>{v.type || "‚Äî"}</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <FuelIcon />
                          <span>{v.carburant || "‚Äî"}</span>
                        </div>
                        <div className="flex items-center space-x-1">
                          <User className="h-4 w-4" />
                          <span>{v.places || "‚Äî"} places </span>
                        </div>
                      </div> */}

                      {/* Upcoming Rental Box */}
                      {upcomingRental && upcomingRental.status=="approved" && (
                        <div className="bg-blue-50 text-sm rounded-md px-3 py-2 flex justify-between items-center">
                          <div>
                            <div className="font-medium text-blue-800">Prochaine r√©servation </div>
                            <div className="text-blue-700">
                              {new Date(upcomingRental.startDate).toLocaleDateString()} √†{" "}
                              {new Date(upcomingRental.startDate).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })}
                            </div>
                            <div className="text-blue-600">
                              Client: {upcomingRental.userId?.nom} ‚Ä¢{" "}
                              {Math.ceil(
                                (new Date(upcomingRental.endDate) - new Date(upcomingRental.startDate)) /
                                  (1000 * 60 * 60 * 24)
                              )}{" "}
                              jours
                            </div>
                          </div>
                          <div className="text-right">
                            <div className="text-blue-700 font-semibold">
                              {(() => {
                                const now = new Date();
                                const start = new Date(upcomingRental.startDate);
                                const diff = Math.ceil((start - now) / (1000 * 60 * 60 * 24));
                                return `Dans ${diff} jour${diff !== 1 ? "s" : ""}`;
                              })()}
                            </div>
                            <div className="text-gray-500 text-xl">‚ùó</div>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AutoLocPremiumDashboard;
